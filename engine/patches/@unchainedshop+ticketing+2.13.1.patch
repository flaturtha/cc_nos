diff --git a/node_modules/@unchainedshop/ticketing/lib/index.js b/node_modules/@unchainedshop/ticketing/lib/index.js
index 484b22e..9dbe181 100644
--- a/node_modules/@unchainedshop/ticketing/lib/index.js
+++ b/node_modules/@unchainedshop/ticketing/lib/index.js
@@ -1,4 +1,4 @@
-import { subscribe } from '@unchainedshop/events';
+import { subscribe, registerEvents } from '@unchainedshop/events';
 import { WorkerEventTypes } from '@unchainedshop/core-worker';
 import { RendererTypes, registerRenderer } from './template-registry.js';
 import loadAppleWalletHandler from './mobile-tickets/apple-webservice.js';
@@ -7,23 +7,41 @@ import loadPDFHandler from './pdf-tickets/print-webservice.js';
 import passes from './module.js';
 import ticketing from './services.js';
 import setupMagicKey from './magic-key.js';
+
+// Register the TOKEN_INVALIDATED and WORK_FINISHED events
+registerEvents(['TOKEN_INVALIDATED', 'WORK_FINISHED']);
+
+// Subscribe to the TOKEN_INVALIDATED event
+subscribe('TOKEN_INVALIDATED', () => {
+    console.log('TOKEN_INVALIDATED event registered.');
+});
+
+// Subscribe to the WORK_FINISHED event
+subscribe('WORK_FINISHED', () => {
+    console.log('WORK_FINISHED event registered.');
+});
+
 export const ticketingModules = {
     passes,
 };
+
 export const ticketingServices = {
     ticketing,
 };
-export function setupPDFTickets(app, { renderOrderPDF, }) {
+
+export function setupPDFTickets(app, { renderOrderPDF }) {
     registerRenderer(RendererTypes.ORDER_PDF, renderOrderPDF);
     loadPDFHandler(app);
 }
-export function setupMobileTickets(app, { createGoogleWalletPass, createAppleWalletPass, }) {
+
+export function setupMobileTickets(app, { createGoogleWalletPass, createAppleWalletPass }) {
     registerRenderer(RendererTypes.GOOGLE_WALLET, createGoogleWalletPass);
     registerRenderer(RendererTypes.APPLE_WALLET, createAppleWalletPass);
     loadAppleWalletHandler(app);
     loadGoogleWalletHandler(app);
 }
-export default function setupTicketing(app, unchainedAPI, { renderOrderPDF, createAppleWalletPass, createGoogleWalletPass, }) {
+
+export default function setupTicketing(app, unchainedAPI, { renderOrderPDF, createAppleWalletPass, createGoogleWalletPass }) {
     setupPDFTickets(app, {
         renderOrderPDF,
     });
@@ -34,13 +52,14 @@ export default function setupTicketing(app, unchainedAPI, { renderOrderPDF, crea
     if (!process.env.UNCHAINED_SECRET)
         throw new Error('Unchained Ticketing needs the UNCHAINED_SECRET environment variable to be set in order to allow magic key access to orders and tokens.');
     setupMagicKey();
+
     subscribe('TOKEN_INVALIDATED', async () => {
         await unchainedAPI.modules.passes.invalidateAppleWalletPasses(unchainedAPI);
     });
+
     subscribe(WorkerEventTypes.FINISHED, async ({ payload: work }) => {
         if ((work.type === 'EXPORT_TOKEN' || work.type === 'UPDATE_TOKEN_OWNERSHIP') && work.success) {
             await unchainedAPI.modules.passes.invalidateAppleWalletPasses(unchainedAPI);
         }
     });
 }
-//# sourceMappingURL=index.js.map
\ No newline at end of file
